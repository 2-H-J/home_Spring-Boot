package com.member;

import static org.assertj.core.api.Assertions.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.member.dto.BoardMemberDTO;
import com.member.service.MemberService;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@SpringBootTest
class SpringApiMemberApplicationTests {
	
	@Autowired
	private MemberService service;
	
	// 전체 테스트 수행 전에 실행할 메서드
	// BeforeALL과 AfterAll은 반드시 static 처리
	@BeforeAll
	public static void initAll() {
		System.out.println("전체 초기화 코드");
	}
	
	// 모든 메서드 실행 후 한번만 실행
	@AfterAll
	public static void endTestAll() {
		System.out.println("테스트 종료 후 코드");
	}
	
	// 각 테스트 메서드 실행 전에 실행하는 메서드
	@BeforeEach
	public void testBefore(TestInfo info) {
		System.out.println("테스트 메서드 수행전에 수행하는 메서드");
		System.out.println(info.getTestMethod().get().getName() + " - " + info.getDisplayName() + " - 시작");
	}
	
	@AfterEach
	// 각테스트 메서드 실행 후에 실행하는 메서드
	public void testAfter(TestInfo info) {
		System.out.println("테스트 메서드 수행후에 수행하는 메서드");
		System.out.println(info.getTestMethod().get().getName() + " - " + info.getDisplayName() + " - 종료");
	}
	
	@Test
	@Order(1) // 테스트 순번 지정
	@DisplayName("회원 정보 등록") // 테스트 이름 지정
	public void insertTest() {
		System.out.println("회원 정보 등록 테스트 시작");
		
		BoardMemberDTO dto = new BoardMemberDTO("user00", "123456", "테스트", "테스트", 4);
		
		try {
			int result = service.insertMember(dto);
			assertEquals(1, result, "회원 등록 테스트 실패");
			
		} catch(Exception e){
			fail("회원 등록 테스트 실패 - " + e.getMessage());
		}
		
		System.out.println("회원 정보 등록 테스트 종료");
		
	}
	
//	@Test
//	@DisplayName("회원 정보 등록 테스트")
//	public void insertTest() {
//		System.out.println("회원 정보 등록 테스트 시작");
//		
//		BoardMemberDTO dto = new BoardMemberDTO("user00", "123456", "테스트", "테스트", 4);
//		
//		int result = 0;
//		
//		try {
//			result = service.insertMember(dto);
//			
//		} catch(Exception e){
//			fail("회원 등록 테스트 실패 - " + e.getMessage());
//			e.printStackTrace();
//		}
//		// 테스트 실패시 해당 테스트 메서드가 강제 종료
//		assertEquals(1, result, "회원 등록 테스트 실패");
//		System.out.println("회원 정보 등록 테스트 종료"); 
//		
//	}
	
	@Test
	@Order(3) // 테스트 순번 지정
	@DisplayName("회원 정보 삭제") // 테스트 이름 지정
	public void deleteTest() {
		System.out.println("회원 정보 삭제 테스트 시작");
		
		int result = service.deleteMember("user00");
		
		assertEquals(1, result, "회원 정보 삭제 실패");
		
		System.out.println("회원 정보 삭제 테스트 종료");
		
	}
	
	// 회원 아이디 검색
	// 데이터 3개를 검색한 결과
	// 테스트할 데이터 "user00", "px2959", "sm9203" 추가 가능
	// assertNotNull(결과값, 실패했을때 메세지)
	@DisplayName("검색 테스트")
	@Order(2)
	@ParameterizedTest
	@ValueSource(strings = {"user00", "px2959", "sm9203"})
	public void selectTest(String value) {
		assertNotNull(service.selectMember(value), value + " - 검색 테스트 실패");
	}


}

